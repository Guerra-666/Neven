---

import Check from '../assets/theme-images/icon-check.svg'
import Cube from '../assets/theme-images/icon-cube.svg'
import CubeOutline from '../assets/theme-images/icon-cube-outline.svg'

const { title, pricing, individualServices } = Astro.props

// Función para formatear precio como moneda
const formatPrice = (price) => {
  return new Intl.NumberFormat('es-MX').format(price)
}

// Función para procesar servicios y extraer notas
const processServices = (services) => {
  const processedServices = []
  const notes = []
  
  services.forEach((service, index) => {
    const text = service.item
    const match = text.match(/^(.*?)\s*\((.*?)\)(.*)$/)
    
    if (match) {
      const [, beforeParen, insideParen, afterParen] = match
      const noteIndex = notes.length + 1
      
      processedServices.push({
        text: (beforeParen + afterParen).trim(),
        noteRef: `*${noteIndex}`
      })
      
      notes.push({
        index: noteIndex,
        text: insideParen
      })
    } else {
      processedServices.push({
        text: text,
        noteRef: null
      })
    }
  })
  
  return { processedServices, notes }
}

---

<section class="bs-container bs-mt-lg" id="pricing">

  <!-- Header -->
  { title && <h2 class="bs-h2 text-center">{ title }</h2>}

  <!-- Servicios individuales - Precios desde -->
  { individualServices && individualServices.length > 0 && (
  <div class="mt-8 mb-12">
    <div class="text-center mb-10">
      <h3 class="text-3xl font-bold mb-3">Servicios individuales</h3>
      <p class="text-xl text-opacity-70">Precios desde $3,000 MXN</p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
      { individualServices.map((service) => (
        <div class="bg-bs-surface-0/50 rounded-lg p-6 border border-bs-foreground-dark/20 hover:bg-bs-surface-0/70 transition-colors">
          <div class="flex justify-between items-start mb-3">
            <h4 class="font-semibold text-lg leading-tight">{service.name}</h4>
            { service.badge && (
              <span class="bg-orange-500/20 text-orange-300 text-sm px-3 py-1 rounded-full ml-3 flex-shrink-0">
                {service.badge}
              </span>
            )}
          </div>
          
          { service.description && (
            <p class="text-sm text-opacity-60 mb-4 leading-relaxed">{service.description}</p>
          )}
          
          <div class="text-right">
            { service.type === "fijo" && (
              <span class="text-2xl font-bold">${formatPrice(service.price)}</span>
            )}
            { service.type === "rango" && (
              <span class="text-2xl font-bold">${formatPrice(service.priceFrom)} - ${formatPrice(service.priceTo)}</span>
            )}
            { service.type === "alternativo" && (
              <div class="space-y-1">
                <div class="text-xl font-bold">${formatPrice(service.price)}</div>
                <div class="text-sm text-opacity-70">o ${service.priceAlt}</div>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
    
    <div class="text-center mt-8">
      <button type="button" class="bs-btn text-lg px-8 py-4" onclick="demo.showModal()">
        Cotizar Servicio Individual
      </button>
    </div>
  </div>
  )}

  <!-- Separador -->
  { individualServices && individualServices.length > 0 && (
  <div class="relative my-16">
    <div class="absolute inset-0 flex items-center">
      <div class="w-full border-t border-bs-foreground-dark/30"></div>
    </div>
    <div class="relative flex justify-center">
      <span class="bg-bs-surface-0 px-6 text-lg text-opacity-70">O elige un paquete completo</span>
    </div>
  </div>
  )}

  <!-- Paquetes completos -->
  <div class="mt-8 grid lg:grid-cols-2 gap-8 lg:gap-0">

    <!-- Item -->

    { pricing.map( ( item, index ) => {
      const { processedServices, notes } = processServices(item.services)
      
      return (
        <article
          class:list={['@container p-6 xl:p-16 flex flex-col gap-8 h-full w-full rounded-xl overflow-hidden lg:scale-90 @xl:justify-between', index === 1 ? 'bg-white/90 text-black/90 lg:scale-none' : 'bg-bs-surface-0/90']}>

          <!-- Content -->
          <div class="relative flex flex-col h-full">

            <!-- Header Section -->
            <div class="flex-shrink-0">
              <!-- Title -->
              <h2 class="bs-h3 flex gap-4 items-center mb-6">

                <!-- Icon -->
                { index === 1 && <Cube height="36" width="36" />  }
                { index !== 1 && <CubeOutline height="36" width="36" />  }

                <!-- Title -->
                <span>{ item.title }</span>

                <!-- Tag -->
                <div
                  class="text-sm uppercase tracking-widest font-semibold hidden sm:block ms-auto rounded-full px-5 py-2 pb-[0.4rem] border border-bs-foreground-dark/30"
                  set:html={ item.tag } />

              </h2>

              <!-- Intro -->
              <div class="text-xl leading-relaxed mb-8" set:html={ item.content } />
            </div>

            <!-- Services list -->
            <div class="flex-grow">
              <ul role="list" class="flex flex-col gap-4">

                { processedServices.map( (service) =>

                  <li class="flex gap-3 md:gap-4 items-start">

                    <!-- Check -->
                    <div class="flex-shrink-0 mt-1">
                      <Check height="22" width="22" />
                    </div>

                    <!-- Item -->
                    <div class="text-lg leading-relaxed">
                      <span>{ service.text }</span>
                      { service.noteRef && 
                        <sup class="text-sm text-opacity-70 ml-1">{ service.noteRef }</sup>
                      }
                    </div>

                  </li>

                )}

              </ul>

              <!-- Notes Section -->
              { notes.length > 0 && (
                <div class="mt-8 pt-6 border-t border-current/20">
                  <div class="space-y-2">
                    { notes.map((note) => (
                      <p class="text-sm text-opacity-70 leading-relaxed">
                        <span class="font-medium">*{note.index}</span> {note.text}
                      </p>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <!-- CTA -->
            <footer class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-6 mt-8 pt-6 border-t border-current/20">

              <!-- Price -->
              <div class="flex flex-col">
                <span class="text-4xl lg:text-5xl font-bold">${ formatPrice(item.price) }</span>
                <span class="text-lg text-opacity-70">por mes</span>
              </div>

              <!-- CTA button -->
              <button type="button" class="bs-btn inline-block text-lg px-8 py-4 whitespace-nowrap" onclick="demo.showModal()">
                { item.cta }
              </button>

            </footer>

          </div>

        </article>
      )
    })}

  </div>

</section>